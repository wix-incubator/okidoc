// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`buildDocumentationSource by source entry should extract documentation source from entry dependencies 1`] = `
"/**
* View
*/
class View {
  /**
  * getter for \`isHidden\` value
  *
  * @example
  * console.log(component.isHidden) // false
  *
  * @returns \`true\` if hidden
  */
  get isHidden(): boolean {}

  /**
  * show
  *
  * @example
  * component.show()
  */
  show() {}

  /**
  * Hide
  *
  * @example
  * component.hide()
  */
  hide() {}

}

/**
* Component
*/
class Component {
  /** */
  constructor() {}

  /**
  * Get component node
  */
  getNode(): Node {}

  /**
  * Render component
  */
  render() {}

}"
`;

exports[`buildDocumentationSource by source entry should extract documentation source from entry dependencies 2`] = `
"/**
* Events
*/
class Events {
  /**
  * add event listener
  */
  addEventListener(fn: Function) {}

  /**
  * remove event listener
  */
  removeEventListener(fn: Function) {}

}"
`;

exports[`buildDocumentationSource by source entry should show readable error if source from entry is invalid 1`] = `
"packages/okidoc-md/src/buildDocumentationSource/__tests__/fixtures/invalid-src/index.ts: Unterminated string constant (1:22)
> 1 | import Component from './Component;
    |                      ^
  2 | 
  3 | export { Component };"
`;

exports[`buildDocumentationSource by source glob pattern should extract documentation source from files matched glob 1`] = `
"/**
* Component
*/
class Component {
  /** */
  constructor() {}

  /**
  * Get component node
  */
  getNode(): Node {}

  /**
  * Render component
  */
  render() {}

}

/**
* View
*/
class View {
  /**
  * getter for \`isHidden\` value
  *
  * @example
  * console.log(component.isHidden) // false
  *
  * @returns \`true\` if hidden
  */
  get isHidden(): boolean {}

  /**
  * show
  *
  * @example
  * component.show()
  */
  show() {}

  /**
  * Hide
  *
  * @example
  * component.hide()
  */
  hide() {}

}"
`;

exports[`buildDocumentationSource by source glob pattern should extract documentation source from files matched glob 2`] = `
"/**
* mountComponent
*/
function mountComponent(component: Function, node: Node) {}

/**
* renderComponent
*/
function renderComponent(component: Function) {}

/**
* unmountComponent
*/
function unmountComponent(component: Function) {}"
`;

exports[`buildDocumentationSource by source glob pattern should show readable error if source from matched file is invalid 1`] = `
"packages/okidoc-md/src/buildDocumentationSource/__tests__/fixtures/invalid-src/index.ts: Unterminated string constant (1:22)
> 1 | import Component from './Component;
    |                      ^
  2 | 
  3 | export { Component };"
`;

exports[`buildDocumentationSource for API class should cleanup typescript vs flow difference class constructor parameter property 1`] = `
"/** */
class View {
  /** */
  constructor(config) {}

}"
`;

exports[`buildDocumentationSource for API class should cleanup typescript vs flow difference class public method 1`] = `
"/** */
class View {
  /** */
  show() {}

}"
`;

exports[`buildDocumentationSource for API class should cleanup typescript vs flow difference interface void method 1`] = `
"/** */
interface IView {
  show(): void;
}"
`;

exports[`buildDocumentationSource for API class with @doc tag on class declaration should extract class 1`] = `
"/** */
class MyComponent {
  /** */
  view: View;

  /**
  * Creates a component
  */
  constructor(config: any) {}

  /**
  * \`isHidden\` getter
  */
  get isHidden() {}

  /**
  * show
  */
  show() {}

  /**
  * hide
  */
  hide() {}

  /** */
  disable() {}

}"
`;

exports[`buildDocumentationSource for API class with @doc tag on class declaration should ignore class private members 1`] = `
"/** */
class MyComponent {
  /** */
  render() {}

}"
`;

exports[`buildDocumentationSource for API class with @doc tag on class members should extract getters and setters with tag 1`] = `
"/** */
class API {
  /**
  * \`width\` getter
  */
  get width() {}

  /**
  * \`width\` setter
  */
  set width(value) {}

}"
`;

exports[`buildDocumentationSource for API class with @doc tag on class members should extract methods with tag 1`] = `
"/** */
class API {
  /**
  * show
  *
  * @example
  * component.show()
  */
  show() {}

}"
`;

exports[`buildDocumentationSource for API class with @doc tag on class members should ignore methods with different tag 1`] = `
"/** */
class API {
  /**
  * show
  */
  show() {}

}"
`;

exports[`buildDocumentationSource for API class with @doc tag on class members should ignore private methods with tag 1`] = `""`;

exports[`buildDocumentationSource for API class with custom visitor should extract class members 1`] = `
"/** */
class API {
  /** */
  get isHidden() {}

  /**
  * show
  */
  show() {}

  /**
  * hide
  */
  hide() {}

}"
`;

exports[`buildDocumentationSource for functions with @doc tag on export declaration should extract functions with tag 1`] = `
"/**
* f1 description
*/
function exportFunctionDeclaration(x) {}

/**
* f2 description
*/
function exportConstArrowFunctionExpression(x) {}

/**
* f3 description
*/
function exportDefaultConstArrowFunctionExpression(x) {}"
`;

exports[`buildDocumentationSource for functions with @doc tag on function declaration should extract functions with tag 1`] = `
"/**
* showComponent
*/
function showComponent() {}

/**
* hideComponent
*/
function hideComponent() {}"
`;

exports[`buildDocumentationSource for functions with @doc tag on var/let/const declaration should extract functions with tag 1`] = `
"/**
* varFunc
*/
function varFunctionExpression() {}

/**
* varArrowFunc
*/
function varArrowFunctionExpression() {}

/**
* letArrowFunc
*/
function letArrowFunctionExpression() {}

/**
* constArrowFunc
*/
function constArrowFunctionExpression() {}"
`;
