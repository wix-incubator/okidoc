// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`buildMarkdown for API class should render markdown for getters/setters 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## isVisible

\`isVisible\` getter comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"type\\">boolean</div>
        </td>
      </tr>
    </tbody>
  </table>
</div>

## width

\`width\` setter comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>value</code>
        </td>
        <td>
            <div class=\\"type\\">number</div>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for API class should render markdown for methods default value 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myMethod()

myMethod comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>x</code>
          <div class=\\"optional\\">(Optional)</div>
        </td>
        <td>
            <div class=\\"type\\">string</div>
            <p><code>x</code> description</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for API class should render markdown for methods interface as return type 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myMethod()

myMethod comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>y</code>
        </td>
        <td>
            <p><code>y</code> comment</p>
            Possible values are <code>\\"bla\\"</code>, <code>\\"not bla\\"</code>.
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>a</code>
        </td>
        <td>
            <div class=\\"type\\">string</div>
            <p><code>a</code> description</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for API class should render markdown for methods with @deprecated 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## doShow()

**DEPRECATED!**

use method \`show()\`

show component

## show()

show component
"
`;

exports[`buildMarkdown for API class should render markdown for methods with @example end @note 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myMethod()

> \`myMethod\` note 1

> test example caption

\`\`\`javascript
console.log('example')
\`\`\`

\`\`\`javascript
console.log('example')
\`\`\`

> \`myMethod\` note 2
> Read more about [myMethod](/my-method)

myMethod comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>x</code>
        </td>
        <td>
            <div class=\\"type\\">string</div>
            <p><code>x</code> description. see <a href=\\"http://example.com\\">http://example.com</a></p>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"type\\">string</div>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for API class should render markdown for methods with @returns comment 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myMethod()

myMethod comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>x</code>
        </td>
        <td>
            <div class=\\"type\\">string</div>
            <p><code>x</code> description</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"type\\">string</div>
            <p>returns comment</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for API class should render markdown for methods with \`...rest\` as param 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myMethod()

myMethod comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>arr</code>
        </td>
        <td>
            <div class=\\"type\\">...Array&#x3C;string></div>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"type\\">Array&#x3C;string></div>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for API class should render markdown for methods with \`optional\` as param 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myMethod()

myMethod comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>x</code>
        </td>
        <td>
            <div class=\\"type\\">number?</div>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"type\\">number</div>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for API class should render markdown for methods with UnionType with NOT literal as @param type 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myMethod()

myMethod comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>y</code>
        </td>
        <td>
            <div class=\\"type\\">(number | null)</div>
            <p><code>y</code> comment</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for API class should render markdown for methods with UnionType with literals as @param type 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myMethod()

myMethod comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>y</code>
        </td>
        <td>
            <p><code>y</code> comment</p>
            Possible values are <code>\\"bla\\"</code>, <code>\\"not bla\\"</code>, <code>7</code>, null.
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for API class should render markdown sections in valid order 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myMethod1()

> test example caption

\`\`\`javascript
console.log('example')
\`\`\`

> \`myMethod1\` note 
> Read more about [myMethod](/my-method)

myMethod1 comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>x</code>
        </td>
        <td>
            <div class=\\"type\\">string</div>
            <p><code>x</code> description</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"type\\">string</div>
            <p>returns comment</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>

## myMethod2()

\`\`\`javascript
console.log('example')
\`\`\`

myMethod2 comment

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>y</code>
        </td>
        <td>
            <p>y comment</p>
            Possible values are <code>\\"bla\\"</code>, <code>\\"not bla\\"</code>.
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"type\\">string</div>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for class should render markdown for class with constructor 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# Component

\`\`\`javascript
new Component({visible: true})
\`\`\`

Component description

\`new Component()\`

creates new Component

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>config</code>
        </td>
        <td>
            <div class=\\"type\\">any</div>
        </td>
      </tr>
    </tbody>
  </table>
</div>

## show()

show
"
`;

exports[`buildMarkdown for functions should render valid markdown 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# Functions

## myFunc1()

myFunc1 description

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>x</code>
        </td>
        <td>
            <div class=\\"type\\">number</div>
            <p><code>x</code> description</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"type\\">number</div>
        </td>
      </tr>
    </tbody>
  </table>
</div>

## myFunc2()

> MyFunc example

\`\`\`javascript
console.log(myFunc(3, 2))
// {a: '3', b: 2}
\`\`\`

myFunc2 description

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>x</code>
        </td>
        <td>
            <div class=\\"type\\">number</div>
            <p><code>x</code> description</p>
        </td>
      </tr>
      <tr>
        <td class=\\"param\\">
          <code>y</code>
        </td>
        <td>
            <div class=\\"type\\">number</div>
            <p><code>y</code> description</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>a</code>
        </td>
        <td>
            <div class=\\"type\\">string</div>
            <p><code>a</code> description</p>
        </td>
      </tr>
      <tr>
        <td class=\\"param\\">
          <code>b</code>
        </td>
        <td>
            <div class=\\"type\\">number</div>
            <p><code>b</code> description</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for functions should render valid markdown with UnionType in TypeApplication as argument 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# Functions

## myFunc()

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>fn</code>
        </td>
        <td>
            <div class=\\"function-type\\">function(<code>value</code>: (string | null)): void</div>
            <p>event handler</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for functions should render valid markdown with function as argument 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# Functions

## myFunc()

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>name</code>
        </td>
        <td>
            <div class=\\"type\\">string</div>
            <p>event name</p>
        </td>
      </tr>
      <tr>
        <td class=\\"param\\">
          <code>fn</code>
        </td>
        <td>
            <div class=\\"function-type\\">function(<code>name</code>: string, <code>data</code>: Object): any</div>
            <p>event handler</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for functions should render valid markdown with function as return type 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# Functions

## myFunc()

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"function-type\\">function(<code>flag</code>: boolean): void</div>
            <p>myFunc result function</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown for functions should render valid markdown with function in return type interface 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# Functions

## create()

create new entity

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">ARGUMENTS</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>title</code>
        </td>
        <td>
            <div class=\\"type\\">string</div>
            <p>entity title</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>id</code>
        </td>
        <td>
            <div class=\\"type\\">string</div>
        </td>
      </tr>
      <tr>
        <td class=\\"param\\">
          <code>title</code>
        </td>
        <td>
            <div class=\\"type\\">string</div>
        </td>
      </tr>
      <tr>
        <td class=\\"param\\">
          <code>updateTitle</code>
        </td>
        <td>
            <div class=\\"function-type\\">function(<code>id</code>: string, <code>title</code>: string): Promise&#x3C;any></div>
        </td>
      </tr>
      <tr>
        <td class=\\"param\\">
          <code>destroy</code>
        </td>
        <td>
            <div class=\\"function-type\\">function(): void</div>
            <p>destroy entity</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown with ApplicationType as return type should render markdown for methods with Array & interface as @returns type 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myFn()

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th><div class=\\"type\\">Array&#x3C;IResult></div></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>x</code>
        </td>
        <td>
            <div class=\\"type\\">number</div>
        </td>
      </tr>
      <tr>
        <td class=\\"param\\">
          <code>y</code>
        </td>
        <td>
            <div class=\\"type\\">number</div>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown with ApplicationType as return type should render markdown for methods with Array as @returns type 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myFn()

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"type\\">Array&#x3C;string></div>
            <p>returns comment</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown with ApplicationType as return type should render markdown for methods with Promise & interface as @returns type 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myFn()

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th><div class=\\"type\\">Promise&#x3C;IResult></div></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
          <code>x</code>
        </td>
        <td>
            <div class=\\"type\\">number</div>
        </td>
      </tr>
      <tr>
        <td class=\\"param\\">
          <code>y</code>
        </td>
        <td>
            <div class=\\"type\\">number</div>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;

exports[`buildMarkdown with ApplicationType as return type should render markdown for methods with Promise as @returns type 1`] = `
"<!-- Generated automatically. Update this documentation by updating the source code. -->

# API Methods

## myFn()

<div class=\\"method-list\\">
  <table>
    <thead>
      <tr>
        <th class=\\"title\\">RETURN VALUE</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class=\\"param\\">
        </td>
        <td>
            <div class=\\"type\\">Promise&#x3C;string></div>
            <p>returns comment</p>
        </td>
      </tr>
    </tbody>
  </table>
</div>
"
`;
